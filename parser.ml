type token =
  | NUM of (float)
  | ID of (string)
  | TRUE
  | FALSE
  | REF
  | EXCMARK
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | LPAREN
  | RPAREN
  | EQEQ
  | LE
  | LT
  | GE
  | GT
  | NOT
  | IF
  | THEN
  | ELSE
  | LET
  | EQUAL
  | IN
  | COLEQ
  | LBRACK
  | RBRACK
  | SEMI
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  259 (* TRUE *);
  260 (* FALSE *);
  261 (* REF *);
  262 (* EXCMARK *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* STAR *);
  266 (* SLASH *);
  267 (* LPAREN *);
  268 (* RPAREN *);
  269 (* EQEQ *);
  270 (* LE *);
  271 (* LT *);
  272 (* GE *);
  273 (* GT *);
  274 (* NOT *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* LET *);
  279 (* EQUAL *);
  280 (* IN *);
  281 (* COLEQ *);
  282 (* LBRACK *);
  283 (* RBRACK *);
  284 (* SEMI *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\001\000\001\000\001\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\006\000\006\000\009\000\005\000\004\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\000\000\004\000\005\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\013\000\014\000"

let yysindex = "\255\255\
\177\000\000\000\000\000\253\254\000\000\000\000\177\000\177\000\
\239\255\177\000\177\000\014\255\000\000\023\000\177\000\159\000\
\111\255\000\000\252\254\159\000\022\255\247\254\177\000\177\000\
\177\000\177\000\177\000\177\000\177\000\177\000\177\000\177\000\
\177\000\000\000\135\255\000\000\177\000\023\255\177\000\084\255\
\084\255\111\255\111\255\157\255\159\000\159\000\159\000\159\000\
\159\000\004\255\177\000\173\255\015\255\189\255\000\000\159\000\
\177\000\003\255\177\000\159\000\177\000\159\000\211\255\177\000\
\159\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\000\
\040\000\000\000\000\000\092\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\085\000\058\000\064\000\000\000\103\000\105\000\110\000\116\000\
\121\000\034\000\000\000\000\000\000\000\000\000\000\000\123\000\
\000\000\000\000\000\000\134\000\000\000\136\000\000\000\000\000\
\141\000"

let yygindex = "\000\000\
\000\000\045\000"

let yytablesize = 455
let yytable = "\001\000\
\006\000\038\000\023\000\024\000\025\000\026\000\027\000\036\000\
\028\000\029\000\030\000\031\000\032\000\039\000\027\000\022\000\
\028\000\029\000\030\000\031\000\032\000\015\000\034\000\033\000\
\053\000\061\000\058\000\000\000\023\000\024\000\025\000\026\000\
\027\000\025\000\028\000\029\000\030\000\031\000\032\000\008\000\
\000\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\016\000\017\000\019\000\020\000\021\000\
\000\000\012\000\000\000\035\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\010\000\000\000\
\000\000\052\000\000\000\054\000\011\000\000\000\000\000\000\000\
\000\000\007\000\000\000\019\000\025\000\026\000\027\000\056\000\
\028\000\029\000\030\000\031\000\032\000\060\000\014\000\062\000\
\016\000\063\000\000\000\000\000\065\000\015\000\000\000\033\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\017\000\027\000\023\000\028\000\029\000\030\000\031\000\032\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\021\000\
\000\000\000\000\033\000\000\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\028\000\029\000\030\000\031\000\032\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
\000\000\000\000\033\000\023\000\024\000\025\000\026\000\027\000\
\055\000\028\000\029\000\030\000\031\000\032\000\000\000\000\000\
\000\000\000\000\000\000\023\000\024\000\025\000\026\000\027\000\
\033\000\028\000\029\000\030\000\031\000\032\000\000\000\000\000\
\000\000\057\000\000\000\023\000\024\000\025\000\026\000\027\000\
\033\000\028\000\029\000\030\000\031\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000\000\000\000\000\
\033\000\023\000\024\000\025\000\026\000\027\000\000\000\028\000\
\029\000\030\000\031\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\000\000\000\000\000\000\033\000\003\000\
\004\000\005\000\006\000\007\000\008\000\000\000\000\000\000\000\
\000\000\009\000\018\000\000\000\000\000\000\000\000\000\000\000\
\010\000\011\000\000\000\000\000\012\000\000\000\000\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\000\000\000\000\006\000\006\000\000\000\000\000\
\006\000\000\000\000\000\000\000\006\000\023\000\024\000\025\000\
\026\000\027\000\000\000\028\000\029\000\030\000\031\000\032\000\
\025\000\025\000\025\000\025\000\000\000\025\000\008\000\008\000\
\008\000\008\000\033\000\008\000\000\000\025\000\025\000\000\000\
\000\000\025\000\000\000\008\000\008\000\025\000\000\000\008\000\
\012\000\012\000\012\000\012\000\000\000\012\000\013\000\013\000\
\013\000\013\000\000\000\013\000\000\000\012\000\012\000\000\000\
\000\000\012\000\000\000\013\000\013\000\010\000\010\000\013\000\
\000\000\000\000\010\000\011\000\011\000\000\000\000\000\000\000\
\011\000\000\000\010\000\010\000\000\000\007\000\010\000\019\000\
\011\000\011\000\000\000\000\000\011\000\007\000\007\000\019\000\
\019\000\007\000\014\000\019\000\016\000\000\000\000\000\000\000\
\000\000\015\000\014\000\014\000\016\000\016\000\014\000\018\000\
\016\000\015\000\015\000\000\000\017\000\015\000\023\000\018\000\
\018\000\000\000\000\000\018\000\017\000\017\000\023\000\023\000\
\017\000\020\000\023\000\021\000\000\000\000\000\000\000\000\000\
\022\000\020\000\020\000\021\000\021\000\020\000\000\000\021\000\
\022\000\022\000\000\000\000\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\028\000\029\000\030\000\031\000\032\000\
\000\000\003\000\004\000\005\000\006\000\007\000\008\000\000\000\
\000\000\000\000\033\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\011\000\000\000\000\000\012\000"

let yycheck = "\001\000\
\000\000\011\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\023\001\011\001\002\001\
\013\001\014\001\015\001\016\001\017\001\025\001\000\000\028\001\
\002\001\023\001\012\001\255\255\007\001\008\001\009\001\010\001\
\011\001\000\000\013\001\014\001\015\001\016\001\017\001\000\000\
\255\255\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\007\000\008\000\009\000\010\000\011\000\
\255\255\000\000\255\255\015\000\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\255\255\
\255\255\037\000\255\255\039\000\000\000\255\255\255\255\255\255\
\255\255\000\000\255\255\000\000\009\001\010\001\011\001\051\000\
\013\001\014\001\015\001\016\001\017\001\057\000\000\000\059\000\
\000\000\061\000\255\255\255\255\064\000\000\000\255\255\028\001\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\000\000\011\001\000\000\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
\255\255\255\255\028\001\255\255\000\000\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\255\255\028\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\028\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\021\001\255\255\007\001\008\001\009\001\010\001\011\001\
\028\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\255\255\
\028\001\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\255\255\028\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\011\001\012\001\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\255\255\255\255\022\001\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\255\255\255\255\
\024\001\255\255\255\255\255\255\028\001\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\007\001\008\001\009\001\010\001\255\255\012\001\007\001\008\001\
\009\001\010\001\028\001\012\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\020\001\021\001\028\001\255\255\024\001\
\007\001\008\001\009\001\010\001\255\255\012\001\007\001\008\001\
\009\001\010\001\255\255\012\001\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\020\001\021\001\007\001\008\001\024\001\
\255\255\255\255\012\001\007\001\008\001\255\255\255\255\255\255\
\012\001\255\255\020\001\021\001\255\255\012\001\024\001\012\001\
\020\001\021\001\255\255\255\255\024\001\020\001\021\001\020\001\
\021\001\024\001\012\001\024\001\012\001\255\255\255\255\255\255\
\255\255\012\001\020\001\021\001\020\001\021\001\024\001\012\001\
\024\001\020\001\021\001\255\255\012\001\024\001\012\001\020\001\
\021\001\255\255\255\255\024\001\020\001\021\001\020\001\021\001\
\024\001\012\001\024\001\012\001\255\255\255\255\255\255\255\255\
\012\001\020\001\021\001\020\001\021\001\024\001\255\255\024\001\
\020\001\021\001\255\255\255\255\024\001\007\001\008\001\009\001\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\028\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\022\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  REF\000\
  EXCMARK\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  LPAREN\000\
  RPAREN\000\
  EQEQ\000\
  LE\000\
  LT\000\
  GE\000\
  GT\000\
  NOT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  EQUAL\000\
  IN\000\
  COLEQ\000\
  LBRACK\000\
  RBRACK\000\
  SEMI\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 36 "parser.mly"
          ( _1 )
# 282 "parser.ml"
               : Calc.file))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
                  ( Calc.UNIT )
# 288 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 41 "parser.mly"
        ( Calc.NUM _1 )
# 295 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
         ( Calc.TRUE )
# 301 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
          ( Calc.FALSE )
# 307 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 44 "parser.mly"
       ( Calc.VAR _1 )
# 314 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 45 "parser.mly"
            ( Calc.NEW _2 )
# 321 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 46 "parser.mly"
                ( Calc.REF _2 )
# 328 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 47 "parser.mly"
                      ( _2 )
# 335 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 48 "parser.mly"
                 ( Calc.ADD (_1, _3) )
# 343 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 49 "parser.mly"
                  ( Calc.SUB (_1, _3) )
# 351 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 50 "parser.mly"
                 ( Calc.MUL (_1, _3) )
# 359 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 51 "parser.mly"
                  ( Calc.DIV (_1, _3) )
# 367 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 52 "parser.mly"
                 ( Calc.EQ (_1, _3) )
# 375 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 53 "parser.mly"
               ( Calc.LT (_1, _3) )
# 383 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 54 "parser.mly"
               ( Calc.LE (_1, _3) )
# 391 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 55 "parser.mly"
               ( Calc.GT (_1, _3) )
# 399 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 56 "parser.mly"
               ( Calc.GE (_1, _3) )
# 407 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 57 "parser.mly"
            ( Calc.NOT (_2) )
# 414 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 58 "parser.mly"
                             ( Calc.IF (_2, _4, _6) )
# 423 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 59 "parser.mly"
                            ( Calc.LET (_2, _4, _6) )
# 432 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 60 "parser.mly"
                                             ( Calc.LETREC (_2, _4, _7, _9) )
# 442 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 61 "parser.mly"
                        ( Calc.ASSIGN (_1, _3, _5) )
# 451 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 62 "parser.mly"
                          ( Calc.CALL_FUN (_1, _3) )
# 459 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 63 "parser.mly"
                 ( Calc.SEQ (_1, _3) )
# 467 "parser.ml"
               : 'exp))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Calc.file)
;;
# 66 "parser.mly"

let parser_error s = print_endline s
# 495 "parser.ml"
